5-6
=========

data-bind出现问题
--------
使用data-bind的话，由于浏览器是用name作为radio唯一判断的，使用data-bind将还必须写上name。这完全是多此一举。

所以我觉得不如直接用name。。比起data-bind还能少写几个单词。

本来不用name是担心占用使用form的同学的属性。现在想想既然用了model，基本都是ajax的吧。占了就占了

updateModel函数
--------------
这个函数要做的就是把
1. 把person1.firstname 改掉
2. 如果是数组怎么办?

 >+ 首先这个数组每个都应该是可以改动的。所以name必须精确到i
 >+ 有数组的pop，push，shift，unshift功能

先考虑用的最多的push。就是添加一项，这已经很复杂了。

如果以前的话，我必须专门记录目前数组的长度，然后使用length+1来做name做出这个元素。

不过在mvvm中应该有的体验是直接对这个数组发送push。

但是如何产生和上面一样的view呢？

如果笨点的话我们只能重写一遍，但只要是重写，我们就知道已经错了，可以重构到没有重复代码

鉴于我发现毕竟我的html模板是string而不是dom，无法查找原来的。所以貌似只能重写了

完成updateModel()，我觉得非常完美


重要方法
-----------
model2view
----------
model转view非常简单，就是模板文件用model来渲染，生成view。

view2model
--------
这个是难点。方法有两种，一种是暴露在公有属性中（如knockout）
如
    <input type="text" data-bind="name.firstname" value="<%=name.firstname%>"></input>

这样的缺点是暴露逻辑，且每次都写出重复代码，并且很难将data-bind的值转为key。

重复代码的问题可以用正则解决。

另一种是将html模板转为dom,就是用appendChild而不是innerHTML来改变view。

但是我没有搞清楚原理

因此暂且用第一种，data-bind的方式（很显然这种会使老的浏览器不兼容）

要注意的是，只有需要读取数据的元素才要data-bind

    <span><%=(firstname+lastname)%></span>

这是不需要data-bind的，因为不会从这里面取数据。

非常不幸的是，即便知道修改的key和目前的value，我们依然不知道是修改了哪个model的value

因此还需要model与view绑定的函数,比如model的名字等于view的id

等等。还有一个问题出现了，修改input中的值，也就修改了model，如果整个view都重新渲染了，那会不会每次输入字符都要闪一次？

看看knockout就知道，他分成两种类型,value和text。一种是可以改变model的，另一种是只被model影响而修改

为了先作出个样子，使用弱观察,即addEventListener('change')，这个类似blur，这样的话渲染整个view也没事了。





